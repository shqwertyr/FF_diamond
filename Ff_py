import telebot
from telebot import types

# –¢–æ–∫–µ–Ω–∏ –±–æ—Ç–∏ —Ç—É
bot = telebot.TeleBot("8265278562:AAFh6mwxZ3ne9nbYhH_tWuL9GkaDwghu5Dw")

# ID-–∏ —Ç—É –±–∞—Ä–æ–∏ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç–∏ —Ñ–∞—Ä–º–æ–∏—à“≥–æ
ADMIN_ID = 7613262506

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üíé –ê–ª–º–∞–∑“≥–æ", "üé´ –ü—Ä–æ–ø—É—Å–∫ –≤–∞ –í–∞—É—á–µ—Ä“≥–æ")
    bot.send_message(message.chat.id, "–•—É—à –æ–º–∞–¥–µ–¥! –ß–∏—Ä–æ –º–µ—Ö–æ“≥–µ–¥ —Ö–∞—Ä–µ–¥?", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üíé –ê–ª–º–∞–∑“≥–æ")
def show_diamonds(message):
    markup = types.InlineKeyboardMarkup()
    for amount, price in [("100", "10"), ("310", "26"), ("520", "45"), ("1060", "80"), ("2180", "150"), ("5600", "370")]:
        markup.add(types.InlineKeyboardButton(f"{amount} –∞–ª–º–∞–∑ - {price} —Å–æ–º–æ–Ω”£", callback_data=f"buy_diamonds:{amount}:{price}"))
    bot.send_message(message.chat.id, "–ò–Ω—Ç–∏—Ö–æ–±–∏ —Ö—É–¥—Ä–æ –∫—É–Ω–µ–¥:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üé´ –ü—Ä–æ–ø—É—Å–∫ –≤–∞ –í–∞—É—á–µ—Ä“≥–æ")
def show_vouchers(message):
    markup = types.InlineKeyboardMarkup()
    vouchers = [
        ("–ü—Ä–æ–ø—É—Å–∫", "40"),
        ("–í–∞—É—á–µ—Ä –Ω–∞ –Ω–µ–¥–µ–ª—é", "16"),
        ("–í–∞—É—á–µ—Ä –Ω–∞ –º–µ—Å—è—Ü", "92"),
        ("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π Lite", "6")
    ]
    for name, price in vouchers:
        markup.add(types.InlineKeyboardButton(f"{name} - {price} —Å–æ–º–æ–Ω”£", callback_data=f"buy_voucher:{name}:{price}"))
    bot.send_message(message.chat.id, "–ò–Ω—Ç–∏—Ö–æ–±–∏ —Ö—É–¥—Ä–æ –∫—É–Ω–µ–¥:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_"))
def process_order(call):
    parts = call.data.split(":")
    if call.data.startswith("buy_diamonds"):
        item = f"{parts[1]} –∞–ª–º–∞–∑"
        price = parts[2]
    elif call.data.startswith("buy_voucher"):
        item = parts[1]
        price = parts[2]
    else:
        return

    pay_text = (
        f"üì¶ –§–∞—Ä–º–æ–∏—à: {item}\n"
        f"üí∞ –ù–∞—Ä—Ö–∏: {price} —Å–æ–º–æ–Ω”£\n\n"
        "üì≤ –†–æ“≥“≥–æ–∏ –ø–∞—Ä–¥–æ—Ö—Ç:\n"
        "1. –î—É—à–∞–Ω–±–µ –ü—ç–π (–î–°)\n"
        "2. –≠—Å—Ö–∞—Ç–∞\n"
        "3. –ê–ª–∏—Ñ –ú–æ–±–∞–π–ª\n\n"
        "üî¢ –†–∞“õ–∞–º–∏ –ø–∞—Ä–¥–æ—Ö—Ç: +992782789999\n\n"
        "–ü–∞—Å –∞–∑ –ø–∞—Ä–¥–æ—Ö—Ç, '‚úÖ –û–ø–ª–∞—Ç–∏–ª' —Ä–æ –∑–µ—Ä –∫—É–Ω–µ–¥."
    )
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –û–ø–ª–∞—Ç–∏–ª", callback_data=f"paid:{item}:{price}"))
    bot.send_message(call.message.chat.id, pay_text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("paid:"))
def ask_receipt(call):
    item, price = call.data.split(":")[1:]
    msg = bot.send_message(call.message.chat.id, "üì∏ –õ—É—Ç—Ñ–∞–Ω —á–µ–∫–∏ –ø–∞—Ä–¥–æ—Ö—Ç—Ä–æ —Ñ–∏—Ä–∏—Å—Ç–µ–¥.")
    bot.register_next_step_handler(msg, lambda m: forward_receipt(m, item, price))

def forward_receipt(message, item, price):
    caption = (
        f"üÜï –§–∞—Ä–º–æ–∏—à–∏ –Ω–∞–≤!\n"
        f"üë§ {message.from_user.first_name} (@{message.from_user.username})\n"
        f"üì¶ –ú–∞“≥—Å—É–ª–æ—Ç: {item}\n"
        f"üí∞ –ù–∞—Ä—Ö: {price} —Å–æ–º–æ–Ω”£\n"
        f"üïí –í–∞“õ—Ç: {message.date}\n"
        f"üì• ID: {message.from_user.id}"
    )
    if message.photo:
        bot.send_photo(ADMIN_ID, message.photo[-1].file_id, caption=caption)
    else:
        bot.send_message(ADMIN_ID, caption + "\n(–ß–µ–∫ –±–µ —Ä–∞—Å–º)")

    bot.send_message(message.chat.id, "‚úÖ –ß–µ–∫ “õ–∞–±—É–ª —à—É–¥! –ü–∞—Å –∞–∑ —Ç–∞—Ñ—Ç–∏—à, –±–æ —à—É–º–æ —Ç–∞–º–æ—Å –º–µ–≥–∏—Ä–µ–º.")

# –û“ì–æ–∑–∏ –±–æ—Ç
bot.polling(none_stop=True)
